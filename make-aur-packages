#!/bin/bash

# Script from https://github.com/jpkotta

# This script builds all of the packages listed in aur_packages.  For
# it to work correctly, you need to have an up to date system of
# whatever architecture you're building for.  It is recommended to
# create a virtual machine of any other architectures you plan to
# build for.

# This script attempts to be idempotent, i.e. running it more than
# once is the same as running it once (unless the inputs have
# changed).

# The way I use this is to set PKGDEST in /etc/makepkg.conf, and then
# link that directory to /tmp/aur-repo.  Any PKGBUILD that I build
# with makepkg automatically goes to PKGDEST, and then this script
# just builds the repo database.

# TODO: package archive regexp or glob; it should match on arch

# modifies by Mr Green for ArchBang Linux
# modified by mbfs for MantOS GNU/Linux

packages_file=$PWD/aur_packages
repo_dir=$PWD/aur/repo/$(uname -m)
build_dir=$PWD/aur/aur-build

PS3="Choose a number: "
if [ ! -d "$repo_dir" ] ; then
    echo "'$repo_dir' does not exist."
    select resp in "Create the directory and continue." \
        "Exit in order to create the directory manually." ; do
        case $resp in 
            Create*)
                mkdir -p "$repo_dir" || exit 1
                break
                ;;
            Exit*)
                echo "You can copy with \"cp -a /path/to/packages/ '$repo_dir'\","
                echo " or symlink with \"ln -s /path/to/packages/ '$repo_dir'\"."
                exit 0
                ;;
            *)
                ;;
        esac
    done
fi

mkdir -p "$build_dir" || exit 1

if [ $UID == 0 ] ; then
    ASROOT="--asroot"
else
    ASROOT=""
fi

if [ ! -f "$packages_file" ] ; then
    echo "Missing package list ($packages_file)."
    exit 1
fi

any_file_match()
{
    [ -f "$1" ]
}

for pkg in $(sed s/#.*$// < "$packages_file") ; do
    if [ -z "$pkg" ] ; then
        continue
    fi

    cd "$repo_dir"
    #if any_file_match ${pkg}-*-any.pkg.tar* \
    #    || any_file_match ${pkg}-*-$(uname -m).pkg.tar* ; then
    #    continue
    #fi

    cd "$build_dir"
    curl -O https://aur.archlinux.org/packages/${pkg:0:2}/$pkg/$pkg.tar.gz

    tar xf $pkg.tar.gz

    # Try to build with dependencies at first.
    (
        export PKGDEST="$repo_dir" 
        cd $pkg
        makepkg --clean --noconfirm --force --rmdeps --syncdeps $ASROOT
    )
    error=$?

    if [ $error = 0 ] ; then
        continue
    fi

    # If the dependencies fail (probably because one of the packages
    # depends on another further down in aur_packages), try to build
    # with no deps.
    (
        export PKGDEST="$repo_dir" 
        cd $pkg
        makepkg --clean --noconfirm --force --nodeps $ASROOT
    )
    error=$?

    if [ $error != 0 ] ; then
        read -p "Error building package $pkg.  Press enter to continue."
        continue
    fi
    
done


dbname=repo
cd $repo_dir
repo-add --quiet --new $dbname.db.tar.gz *-$(uname -m).pkg.tar.xz
repo-add --quiet --new $dbname.db.tar.gz *-any.pkg.tar.xz

